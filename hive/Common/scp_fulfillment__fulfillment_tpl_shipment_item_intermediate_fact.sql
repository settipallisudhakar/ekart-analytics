Insert overwrite table fulfillment_tpl_shipment_item_intermediate_fact
select shipment_item_sr_id,
item.sr_id,
item.cms_category,
item.cms_vertical,
item.created_at,	
invoice_number,
item_content,
listing_breadth,
listing_height,
listing_length,
listing_weight,
lpe_tier,
item.order_id,
item.order_item_id,
product_currency,
product_value,
product_breadth,
product_height,
product_length,
product_weight,
product_id,
product_title,
SUM(quantity) OVER (PARTITION BY item.sr_id ORDER BY item.sr_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as rolled_quantity,
seller_pincode,
seller_id,
seller_type,
tax_per_unit_currency,
tax_per_unit_value,
total_tax_currency,
total_tax_value,
is_dangerous,
-- null as item_flag
case when rank_asc='1' then '1' else '0' end as item_flag,
case when shipping_category is null then 'OTHERS' else shipping_category end as shipping_category,
null as fulfill_item_unit_dispatch_service_tier,
quantity
from bigfoot_external_neo.scp_fulfillment__fulfillment_liteshipmentitems_base_fact item
left join
(select sr_id,cms_vertical,shipping_category,rank() over (partition by sr_id order by case when precedence is null then '9' else precedence end asc) as rank_asc from bigfoot_external_neo.scp_fulfillment__fulfillment_liteshipmentitems_base_fact item left join bigfoot_common.lite_vertical_to_shipping_category T1 on item.cms_vertical=T1.vertical group by sr_id,cms_vertical,shipping_category,precedence) T1 on item.sr_id=T1.sr_id and item.cms_vertical=T1.cms_vertical;
